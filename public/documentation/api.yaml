openapi: 3.0.0
info:
  version: 1.0.0
  title: DotKernel API
  description: DotKernel API documentation
  contact:
    name: Support
    url: https://github.com/dotkernel/api
    email: support@dotkernel.com
servers:
  - url: http://localhost:8080
    description: development
paths:
  /activate:
    post:
      tags:
        - Accounts
      summary: Users request account activation email.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateAccount'
      responses:
        '200':
          description: User account activation mail has been (re)sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '400':
          $ref: '#/components/schemas/_ResponseCode400'
        '500':
          $ref: '#/components/schemas/_ResponseCode500'
  /activate/{hash}:
    get:
      tags:
        - Accounts
      summary: Users activate their account.
      parameters:
        - in: path
          name: hash
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User account has been successfully activated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '401':
          $ref: '#/components/schemas/_ResponseCode401'
        '403':
          $ref: '#/components/schemas/_ResponseCode403'
        '404':
          $ref: '#/components/schemas/_ResponseCode404'
        '500':
          $ref: '#/components/schemas/_ResponseCode500'
  /my-account:
    delete:
      tags:
        - Accounts
      summary: Users mark their account as deleted.
      responses:
        '200':
          description: User account has been marked as deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '401':
          $ref: '#/components/schemas/_ResponseCode401'
        '403':
          $ref: '#/components/schemas/_ResponseCode403'
        '404':
          $ref: '#/components/schemas/_ResponseCode404'
        '500':
          $ref: '#/components/schemas/_ResponseCode500'
      security:
        - auth: []
    get:
      tags:
        - Accounts
      summary: Users view their account.
      responses:
        '200':
          description: User account has been returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '401':
          $ref: '#/components/schemas/_ResponseCode401'
        '403':
          $ref: '#/components/schemas/_ResponseCode403'
        '404':
          $ref: '#/components/schemas/_ResponseCode404'
        '500':
          $ref: '#/components/schemas/_ResponseCode500'
      security:
        - auth: []
    patch:
      tags:
        - Accounts
      summary: Users update their account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccount'
      responses:
        '200':
          description: Updated user account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '401':
          $ref: '#/components/schemas/_ResponseCode401'
        '403':
          $ref: '#/components/schemas/_ResponseCode403'
        '404':
          $ref: '#/components/schemas/_ResponseCode404'
        '500':
          $ref: '#/components/schemas/_ResponseCode500'
      security:
        - auth: []
  /my-account/avatar:
    post:
      tags:
        - Accounts
      summary: Users set their own avatar.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateUserAvatar'
      responses:
        '200':
          description: User avatar has been successfully set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '400':
          $ref: '#/components/schemas/_ResponseCode400'
        '401':
          $ref: '#/components/schemas/_ResponseCode401'
        '403':
          $ref: '#/components/schemas/_ResponseCode403'
        '500':
          $ref: '#/components/schemas/_ResponseCode500'
      security:
        - auth: []
  /oauth/generate:
    post:
      tags:
        - Security
      summary: Get authorization token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateOauth'
      responses:
        '200':
          description: Authorization token has been successfully generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OauthResponse'
        '500':
          $ref: '#/components/schemas/_ResponseCode500'
  /oauth/refresh:
    post:
      tags:
        - Security
      summary: Refresh authorization token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshOauth'
      responses:
        '200':
          description: Authorization token has been successfully refreshed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OauthResponse'
        '500':
          $ref: '#/components/schemas/_ResponseCode500'
  /register:
    post:
      tags:
        - Accounts
      summary: Guests register a new account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccount'
      responses:
        '200':
          description: User account has been created (status=pending).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '400':
          $ref: '#/components/schemas/_ResponseCode400'
        '500':
          $ref: '#/components/schemas/_ResponseCode500'
  /user:
    get:
      tags:
        - Users
      summary: List user accounts.
      parameters:
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: [active,pending]
        - in: query
          name: deleted
          required: false
          schema:
            type: string
            enum: [yes,no]
        - in: query
          name: search
          required: false
          schema:
            type: string
        - in: query
          name: page
          required: false
          schema:
            type: integer
        - in: query
          name: order
          required: false
          schema:
            type: string
            enum: [user.uuid,user.email,user.created,user.updated,detail.firstname,detail.lastname]
            default: user.created
        - in: query
          name: dir
          required: false
          schema:
            type: string
            enum: [asc,desc]
            default: desc
      responses:
        '200':
          description: List user accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCollection'
        '400':
          $ref: '#/components/schemas/_ResponseCode400'
        '401':
          $ref: '#/components/schemas/_ResponseCode401'
        '403':
          $ref: '#/components/schemas/_ResponseCode403'
        '500':
          $ref: '#/components/schemas/_ResponseCode500'
      security:
        - auth: []
    post:
      tags:
        - Users
      summary: Create user account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '200':
          description: User account has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '400':
          $ref: '#/components/schemas/_ResponseCode400'
        '500':
          $ref: '#/components/schemas/_ResponseCode500'
      security:
        - auth: []
  /user/{uuid}:
    delete:
      tags:
        - Users
      summary: Delete / Mark as deleted user account.
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
        - in: query
          name: delete
          required: false
          schema:
            type: string
            enum: [true]
      responses:
        '200':
          description: Marked user account as deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '204':
          description: Deleted user account.
        '401':
          $ref: '#/components/schemas/_ResponseCode401'
        '403':
          $ref: '#/components/schemas/_ResponseCode403'
        '404':
          $ref: '#/components/schemas/_ResponseCode404'
        '500':
          $ref: '#/components/schemas/_ResponseCode500'
      security:
        - auth: []
    get:
      tags:
        - Users
      summary: View user account.
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Received user account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '401':
          $ref: '#/components/schemas/_ResponseCode401'
        '403':
          $ref: '#/components/schemas/_ResponseCode403'
        '404':
          $ref: '#/components/schemas/_ResponseCode404'
        '500':
          $ref: '#/components/schemas/_ResponseCode500'
      security:
        - auth: []
    patch:
      tags:
        - Users
      summary: Update user account.
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Updated user account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '401':
          $ref: '#/components/schemas/_ResponseCode401'
        '403':
          $ref: '#/components/schemas/_ResponseCode403'
        '404':
          $ref: '#/components/schemas/_ResponseCode404'
        '500':
          $ref: '#/components/schemas/_ResponseCode500'
      security:
        - auth: []
  /user/avatar/{uuid}:
    post:
      tags:
        - Users
      summary: Set user avatar.
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateUserAvatar'
      responses:
        '200':
          description: Create user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '400':
          $ref: '#/components/schemas/_ResponseCode400'
        '401':
          $ref: '#/components/schemas/_ResponseCode401'
        '403':
          $ref: '#/components/schemas/_ResponseCode403'
        '500':
          $ref: '#/components/schemas/_ResponseCode500'
      security:
        -
          auth: []
  /user/activate/{uuid}:
    post:
      tags:
        - Users
      summary: (Re)Send user account activation email (if user.status is pending).
      parameters:
          - in: path
            name: uuid
            required: true
            schema:
              type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - properties:
                  type: object
      responses:
        '200':
          description: User account activation email has been (re)sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '400':
          $ref: '#/components/schemas/_ResponseCode400'
        '401':
          $ref: '#/components/schemas/_ResponseCode401'
        '403':
          $ref: '#/components/schemas/_ResponseCode403'
        '500':
          $ref: '#/components/schemas/_ResponseCode500'
      security:
        - auth: []
components:
  schemas:
    ActivateAccount:
      allOf:
        - properties:
            email:
              type: string
          type: object
    CreateAccount:
      allOf:
        - properties:
            email:
              type: string
            password:
              type: string
            passwordConfirm:
              type: string
            detail:
              $ref: '#/components/schemas/CreateUserDetail'
          type: object
    CreateUser:
      allOf:
        - properties:
            email:
              type: string
            password:
              type: string
            passwordConfirm:
              type: string
            status:
              type: string
              enum: [pending,active]
              example: pending
            detail:
              $ref: '#/components/schemas/CreateUserDetail'
            roles:
              type: array
              items:
                type: object
                properties:
                  uuid:
                    type: string
                    example: 4b91fe62-1e6d-11e9-9e6b-00219bfc8d4d
          type: object
    CreateUserAvatar:
      allOf:
        - properties:
            avatar:
              type: string
              format: binary
          type: object
    CreateUserDetail:
      allOf:
        -
          properties:
            firstname:
              type: string
            lastname:
              type: string
          type: object
    GenerateOauth:
      allOf:
        - properties:
            grant_type:
              type: string
              enum: [password]
              default: password
            client_id:
              type: string
              example: dotkernel
            client_secret:
              type: string
              example: secret
            scope:
              type: string
              example: api
            username:
              type: string
            password:
              type: string
          type: object
    OauthResponse:
      allOf:
        -
          properties:
            token_type:
              type: string
              example: Bearer
            expires_in:
              type: int
              example: 86400
            access_token:
              type: string
              example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImI1YTE5OWQ0YzM2ZGQ4OTdlOGQyZmZhNGM2ODAwNGMxOTAwMmFmYzAwYzE2NDc5NWVkMjg3ZjE5YzkxYzFhZDA5MGZkMTZiNWQwZGJkNGM0In0.eyJhdWQiOiJkb3RrZXJuZWwiLCJqdGkiOiJiNWExOTlkNGMzNmRkODk3ZThkMmZmYTRjNjgwMDRjMTkwMDJhZmMwMGMxNjQ3OTVlZDI4N2YxOWM5MWMxYWQwOTBmZDE2YjVkMGRiZDRjNCIsImlhdCI6MTU1ODM2MDU1NCwibmJmIjoxNTU4MzYwNTU0LCJleHAiOjE1NTg0NDY5NTQsInN1YiI6ImFAYS5jb20iLCJzY29wZXMiOltdfQ.JwhmVAYbAZ-SLlbX3T1wh0O__7OlChOOgZIvLa2h6mgQZe0HYH1OEskI7f7zbf-H-qMQAseHVacsKCf8ySbFKVyk760EqHV14J8HqeSb5pGaPXtvEzXJnIhEhM9b33IfUGBrRiHhqIXOTjTmDSc7A-edVP3GWjcDyk7s_Vrl1XVvz7u2pMxF3zMqgNBWo0cNS8oeH4slpW475UAA2WrT7s3mF1YQqsKlD2ba3DavGx_I8ohs6rrzIamHNgKwI_el3XIrcY-Oj7nIVjd-ri71PwwkuW6swNyOUuaoKBR6ViNYPV079LPrLV_PCaIoIU9XZ9slv1yB_A7HX0m3y9jYWw'
            refresh_token:
              type: string
              example: 'def5020058e03bbf7f4488eeb52f9216e6ddf1dd1e309621d502b3cebb372840a043524ae31dbd0b2e0cb560250859868593634b17fbacf0b9fc2aae0554e0bb1ad08af8f7c354ab4b481fd6124af9b6b695f150d5fca487690fd5da3095a8d33e46f180081481088af693fa76334d2e5bed4e46f0fd2753cf7b0af0d0f1e344f4b9f0c6eee592773ae9af5920da9826988f0b79222942597c69f6659a1989a67a6efc79540997b6a9ee69d74a964a8cbd2bf209c101bcf8f2d25e5c4adba937f198892d0ba02d48917fdba23c35055f7c0be86477f695296a267b444ebc9f01f405529e0c578bcc39fa43963410180aefd2cc914f33ff6930bb0e5a71d02cf722a5b2b44341f279e972d3817f5944e38ed0904d087e6252a8cc34cab47d974ef40f9a9c3b8d5c778ad20c4357a59743772cce1496367f9d795613a594a9dc5cf96d5aa5c8cf8de150f5543f03b3fb89a8ace075d3cdcec7a3723793d1d4846293efa174ae6db5604ac0bf1e4facfa2b9a'
    RefreshOauth:
      allOf:
        - properties:
            grant_type:
              type: string
              enum: [refresh_token]
              default: refresh_token
            client_id:
              type: string
              example: dotkernel
            client_secret:
              type: string
              example: secret
            scope:
              type: string
              example: api
            refresh_token:
              type: string
          type: object
    UpdateAccount:
      allOf:
        - properties:
            email:
              type: string
            password:
              type: string
            passwordConfirm:
              type: string
            detail:
              $ref: '#/components/schemas/UpdateUserDetail'
          type: object
    UpdateUser:
      allOf:
        - properties:
            email:
              type: string
            status:
              type: string
            password:
              type: string
            passwordConfirm:
              type: string
            detail:
              $ref: '#/components/schemas/UpdateUserDetail'
            roles:
              type: array
              items:
                type: object
                properties:
                  uuid:
                    type: string
                    example: 4b91fe62-1e6d-11e9-9e6b-00219bfc8d4d
          type: object
    UpdateUserDetail:
      allOf:
        - properties:
            firstname:
              type: string
            lastname:
              type: string
          type: object
    UserAvatarEntity:
      allOf:
        - properties:
            uuid:
              type: string
              example: 4b91fe62-1e6d-11e9-9e6b-00219bfc8d4d
            name:
              type: string
              example: avatar-d57d2e7e-e917-11e9-9f97-b8ca3aa0178d.jpg
            url:
              type: string
              example: 'http://example.com/uploads/user/4b91fe62-1e6d-11e9-9e6b-00219bfc8d4d/avatar-d57d2e7e-e917-11e9-9f97-b8ca3aa0178d.jpg'
            created:
              $ref: '#/components/schemas/_TypeDatetime'
            updated:
              $ref: '#/components/schemas/_TypeDatetime'
    UserDetailEntity:
      allOf:
        -
          properties:
            firstname:
              type: string
              example: Firstname
            lastname:
              type: string
              example: Lastname
            created:
              $ref: '#/components/schemas/_TypeDatetime'
            updated:
              $ref: '#/components/schemas/_TypeDatetime'
    UserCollection:
      allOf:
        - properties:
            _total_items:
              type: int
              example: 85
            _links:
              $ref: '#/components/schemas/_MetadataList'
            _embedded:
              properties:
                users:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserEntity'
    UserEntity:
      allOf:
        -
          properties:
            uuid:
              type: string
              example: 4b91fe62-1e6d-11e9-9e6b-00219bfc8d4d
            hash:
              type: string
              example: 3e26522ced99e7d5ed4d948b348f17837ad8d32b714e729420a01dc31488ba71
            email:
              type: string
              example: user@example.com
            status:
              type: string
              example: active
            isDeleted:
              type: boolean
              example: false
            avatar:
              $ref: '#/components/schemas/UserAvatarEntity'
            detail:
              $ref: '#/components/schemas/UserDetailEntity'
            roles:
              $ref: '#/components/schemas/UserRoleCollection'
            created:
              $ref: '#/components/schemas/_TypeDatetime'
            updated:
              $ref: '#/components/schemas/_TypeDatetime'
            _links:
              properties:
                self:
                  properties:
                    href:
                      type: string
                      example: 'http://example.com/user/4b91fe62-1e6d-11e9-9e6b-00219bfc8d4d'
    UserRoleCollection:
      type: array
      items:
        $ref: '#/components/schemas/UserRoleEntity'
    UserRoleEntity:
      allOf:
        -
          properties:
            uuid:
              type: string
              example: 4b91fe62-1e6d-11e9-9e6b-00219bfc8d4d
            name:
              type: string
              example: member
            created:
              $ref: '#/components/schemas/_TypeDatetime'
            updated:
              $ref: '#/components/schemas/_TypeDatetime'
    _MetadataList:
      allOf:
        - properties:
            first:
              properties:
                href:
                  type: string
                  example: 'http://example.com/entity?page=1'
            prev:
              properties:
                href:
                  type: string
                  example: 'http://example.com/entity?page=4'
            self:
              properties:
                href:
                  type: string
                  example: 'http://example.com/entity?page=5'
            next:
              properties:
                href:
                  type: string
                  example: 'http://example.com/entity?page=6'
            last:
              properties:
                href:
                  type: string
                  example: 'http://example.com/entity?page=9'
    _TypeDatetime:
      allOf:
        -
          properties:
            date:
              type: string
              example: "2000-01-01 00:00:00.000000"
            timezone_type:
              type: int
              example: 3
            timezone:
              type: string
              example: "Europe/Berlin"
    _ResponseCode400:
      description: 'Error: Bad Request.'
    _ResponseCode401:
      description: 'Error: Unauthorized.'
    _ResponseCode403:
      description: 'Error: Forbidden.'
    _ResponseCode404:
      description: 'Error: Not Found.'
    _ResponseCode500:
      description: Internal server error.
  securitySchemes:
    auth:
      type: http
      description: Use the login route and copy the bearer token
      name: Authorization
      in: header
      scheme: bearer
tags:
  -
    name: Security
    description: 'Manage security'
  -
    name: Users
    description: 'Admins manage user accounts'
  -
    name: Accounts
    description: 'Users manage their own accounts'